syntax = "proto3";

package com.here.pb.hdmap.platform.v1.common;

import "google/protobuf/wrappers.proto";

// Common messages used across different layers

// Reference ID for a feature in the current partition
message LocalFeatureReference {
    // A disambiguated (unique in map) identifier for the feature
    // In the format <domain>:<system>:<type>:<id>
    // e.g. "here:cm:node:3455277"
    string uri = 1;
}

// Reference for a feature possibly in a different tile
message TiledFeatureReference {
    // Always populated, even for current tile
    PartitionReference tile_ref = 1;
    LocalFeatureReference local_feature_ref = 2;
}

// Parametric span range on linear geometry.  Values are 0.0 - 1.0
message ParametricRange {
    double range_distance_from_start = 1;
    double range_distance_from_end = 2;
}

// Parametric location on linear.  Values are 0.0 - 1.0
message ParametricLocation {
    double location_distance_from_start = 1;
}

// DataStore partition reference, aka tile id.  Max level 15 in a uint32
message PartitionReference {
    string here_tile_id = 1;
}

// Direction qualifier, relative to the direction of geometry from start to end
enum RelativeDirection {
    RELATIVE_DIRECTION_UNKNOWN = 0;
    BOTH = 1;
    FORWARD = 2;
    BACKWARD = 3;
    NONE = 4;
}

// Defines a HERE HAD content specification a feature is compliant with
message SpecificationComplianceAssertion {
    // Reference to the specification the feature is compliant with
    PartitionedFeatureReference compliant_with_specification_ref = 1;

    // UNUSED
    repeated TiledFeatureReference compliance_rule_outcome_refs = 2 [deprecated = true];
    // If present, the highest version of the specification the feature is compliant with
    // If not present, no version limitation is specified (e.g. compatible with all versions)
    google.protobuf.UInt32Value compliant_up_to_specification_version = 3;

}

// Multiple wrapper for SpecificationComplianceAssertion
message SpecificationComplianceAssertions {
    repeated SpecificationComplianceAssertion entries = 1;
}

// DataStore partition reference , aka tile id for tiles in a generically partitioned layer
message GenericPartitionReference {
    string partition_id = 1;
}

// Defines a reference to a feature in partition in a generically partitioned layer
message PartitionedFeatureReference  {
    GenericPartitionReference partition_ref = 1;
    LocalFeatureReference local_feature_ref = 2;
}

// Reference to an EC tile and surface path that corresponds to a particular parametric range of given lane group
message EarthCoreFeatureReference {

    // EarthCore tile id
    string tile_id = 1;

    // EarthCore feature id
    string feature_id = 2;

    // Version of the feature referenced
    uint64 feature_version = 3;
}

// Reference to a Feature's source drive details i.e. drive id and pose version
message DrivePoseReference {
    // Drive ID
    string drive_id = 1;

    // Pose Version
    uint64 pose_version = 2;

    // Start timestamp (optional)
    uint64 start_timestamp = 3;

    // End timestamp (optional)
    uint64 end_timestamp = 4;
}

// Indicates the side of feature, relative to its logical orientation
enum RelativeSide {
    RELATIVE_SIDE_UNKNOWN = 0;
    LEFT = 1;
    RIGHT = 2;
    BOTH_LEFT_AND_RIGHT = 3;
}