// Schema Version: 1.9.0
syntax = "proto3";
package com.here.pb.hdmap.external.v1.geometry;

// Geometry definitions, size optimized for external format

// Represents a 2D point
message Point2d {
    sint64 here_2d_coordinate = 1;
    sint32 z_level_index = 2;
}

// Represents a 3D point
message Point3d {
    sint64 here_2d_coordinate = 1;
    sint32 cm_from_WGS84_ellipsoid = 2;
}

// Represents a 2D polyline using point offset encoding from parent tile centerpoint
message LineString2dOffset {

	// Offset encoded from the previous entry and for the first entry, the tile centerpoint
	repeated sint64 here_2d_coordinate_diffs = 1 [packed=true];
	
	// Not offset encoded
	repeated sint32 z_level_indexes = 2 [packed=true];
}

// Represents a 3D polyline using point and elevation offset encoding from parent tile centerpoint
message LineString3dOffset {

	// Offset encoded from the previous entry and for the first entry, the tile centerpoint
	repeated sint64 here_2d_coordinate_diffs = 1 [packed=true];
	
	// Offset encoded from the previous entry and for the first entry, the tile centerpoint
    repeated sint32 cm_from_WGS84_ellipsoid_diffs = 2 [packed=true];
}

// Container for elevation measure in centimeters from the WGS84 ellipsoid
// Can be inlined when not nullable 
message ElevationMeasure {
     sint32 cm_from_WGS84_ellipsoid = 1;
}

// Container for vertical stacking of points in the current location
// Can be inlined when not nullable
message ZLevelIndex {
	sint32 index = 1;
}

// Oriented 3D Rectangle mainly used to represent signs
message OrientedRectangle3d {
    
    // The center point of the Oriented Rectangle which includes latitude, longitude, and elevation in cm.
    com.here.pb.hdmap.external.v1.geometry.Point3d center_point = 1;
    
    // Height of the Oriented Rectangle in centimeters
    uint32 height_in_cm = 2;
    
    // Width of the Oriented Rectangle in centimeters
    uint32 width_in_cm = 3;
    
    // The bearing in degrees of where the Oriented Rectangle faces relative to true North in clockwise direction.
    uint32 bearing_in_degrees = 4;
}
